{"version":3,"sources":["../src/newgroup.js"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","NewGroup","selector","contextid","preinit","prototype","modal","that","get_string","then","title","formtitle","on","e","preventDefault","studentid","attr","cmid","create","type","types","SAVE_CANCEL","body","getBody","setLarge","getRoot","hidden","setBody","bind","shown","append","save","submitForm","submitFormAjax","show","init","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","element","promises","call","methodname","args","userid","done","response","find","html","rubricscore","feedback","fail","handleFormSubmissionFailure","data","trigger","changeEvent","document","createEvent","initEvent","each","index","dispatchEvent","invalid","merge","length","first","focus","formData","serialize","parseInt","submit"],"mappings":"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","sourcesContent":["/**\r\n * Add a create new group modal to the page.\r\n *\r\n * @module     core_group/newgroup\r\n * @class      NewGroup\r\n * @package    core_group\r\n * @copyright  2017 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\r\n    function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\r\n\r\n        /**\r\n         * Constructor\r\n         *\r\n         * @param {String} selector used to find triggers for the new group modal.\r\n         * @param {int} contextid\r\n         *\r\n         * Each call to init gets it's own instance of this class.\r\n         */\r\n        var NewGroup = function(selector, contextid) {\r\n            this.contextid = contextid;\r\n            this.preinit(selector);\r\n        };\r\n\r\n        /**\r\n         * @var {Modal} modal\r\n         * @private\r\n         */\r\n        NewGroup.prototype.modal = null;\r\n\r\n        /**\r\n         * @var {int} contextid\r\n         * @private\r\n         */\r\n        NewGroup.prototype.contextid = -1;\r\n\r\n\r\n        /**\r\n         * Initialise the class.\r\n         *\r\n         * @param {String} selector used to find triggers for the new group modal.\r\n         * @private\r\n         * @return {Promise}\r\n         */\r\n        NewGroup.prototype.preinit = function(selector) {\r\n            var triggers = selector;\r\n            var that = this;\r\n\r\n            Str.get_string('dorubricgrade', 'mod_pchat').then(function(title){that.formtitle=title;});\r\n            // Fetch the title string.\r\n            $(triggers).on('click', function(e){\r\n                e.preventDefault();\r\n\r\n                that.studentid = $(this).attr('data-student-id');\r\n                that.cmid = $(this).attr('data-cm-id');\r\n\r\n                // Create the modal.\r\n                ModalFactory.create({\r\n                    type: ModalFactory.types.SAVE_CANCEL,\r\n                    title: that.formtitle,\r\n                    body: that.getBody()\r\n                }).then(function(modal) {\r\n                    // Keep a reference to the modal.\r\n                    that.modal = modal;\r\n\r\n                    // Forms are big, we want a big modal.\r\n                    that.modal.setLarge();\r\n\r\n                    // We want to reset the form every time it is opened.\r\n                    that.modal.getRoot().on(ModalEvents.hidden, function () {\r\n                        that.modal.setBody(that.getBody());\r\n                    }.bind(that));\r\n\r\n                    // We want to hide the submit buttons every time it is opened.\r\n                    that.modal.getRoot().on(ModalEvents.shown, function () {\r\n                        that.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\r\n                    });\r\n\r\n\r\n                    // We catch the modal save event, and use it to submit the form inside the modal.\r\n                    // Triggering a form submission will give JS validation scripts a chance to check for errors.\r\n                    that.modal.getRoot().on(ModalEvents.save, that.submitForm.bind(that));\r\n                    // We also catch the form submit event and use it to submit the form with ajax.\r\n                    that.modal.getRoot().on('submit', 'form', that.submitFormAjax.bind(that));\r\n                    that.modal.show();\r\n                    return that.modal;\r\n                });//end of then(function(modal)\r\n            });//end of click event\r\n        };\r\n\r\n\r\n        /**\r\n         * Initialise the class.\r\n         *\r\n         * @param {String} selector used to find triggers for the new group modal.\r\n         * @private\r\n         * @return {Promise}\r\n         */\r\n        NewGroup.prototype.init = function(selector) {\r\n            var triggers = selector;\r\n            this.studentid = $(selector).attr('data-student-id');\r\n            this.cmid = $(selector).attr('data-cm-id');\r\n\r\n            // Fetch the title string.\r\n            return Str.get_string('creategroup', 'core_group').then(function(title) {\r\n                // Create the modal.\r\n                return ModalFactory.create({\r\n                    type: ModalFactory.types.SAVE_CANCEL,\r\n                    title: title,\r\n                    body: this.getBody()\r\n                }, triggers);\r\n            }.bind(this)).then(function(modal) {\r\n                // Keep a reference to the modal.\r\n                this.modal = modal;\r\n\r\n                // Forms are big, we want a big modal.\r\n                this.modal.setLarge();\r\n\r\n                // We want to reset the form every time it is opened.\r\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\r\n                    this.modal.setBody(this.getBody());\r\n                }.bind(this));\r\n\r\n                // We want to hide the submit buttons every time it is opened.\r\n                this.modal.getRoot().on(ModalEvents.shown, function() {\r\n                    this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\r\n                }.bind(this));\r\n\r\n\r\n                // We catch the modal save event, and use it to submit the form inside the modal.\r\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\r\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\r\n                // We also catch the form submit event and use it to submit the form with ajax.\r\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\r\n\r\n                return this.modal;\r\n            }.bind(this));\r\n        };\r\n\r\n        /**\r\n         * @method getBody\r\n         * @private\r\n         * @return {Promise}\r\n         */\r\n        NewGroup.prototype.getBody = function(formdata) {\r\n            if (typeof formdata === \"undefined\") {\r\n                formdata = {};\r\n            }\r\n            // Get the content of the modal.\r\n            var params = {jsonformdata: JSON.stringify(formdata)};\r\n            params.studentid = this.studentid;\r\n            params.cmid = this.cmid;\r\n\r\n            return Fragment.loadFragment(\r\n                'mod_pchat',\r\n                'new_group_form',\r\n                this.contextid,\r\n                params);\r\n        };\r\n\r\n        /**\r\n         * @method handleFormSubmissionResponse\r\n         * @private\r\n         * @return {Promise}\r\n         */\r\n        NewGroup.prototype.handleFormSubmissionResponse = function() {\r\n            this.modal.hide();\r\n\r\n            Y.use('moodle-core-formchangechecker', function() {\r\n                M.core_formchangechecker.reset_form_dirty_state();\r\n            });\r\n\r\n         //   $(\"[data-original-student]\").trigger('change');\r\n\r\n            var element = $(\".card[data-original-student='\" + this.studentid + \"']\");\r\n            var promises = Ajax.call([\r\n                { methodname: 'mod_pchat_get_grade_submission', args: {  userid: this.studentid, cmid: this.cmid } }]);\r\n\r\n            promises[0].done(function(response) {\r\n                if(response && response.response[0]) {\r\n                    $(element).find('.chatrubricscore').html(response.response[0].rubricscore);\r\n                    $(element).find('.chatfeedback').html(response.response[0].feedback);\r\n                }\r\n            }).fail(function(ex) {\r\n                // @todo do something with the exception\r\n            });\r\n\r\n\r\n        };\r\n\r\n        /**\r\n         * @method handleFormSubmissionFailure\r\n         * @private\r\n         * @return {Promise}\r\n         */\r\n        NewGroup.prototype.handleFormSubmissionFailure = function(data) {\r\n            // Oh noes! Epic fail :(\r\n            // Ah wait - this is normal. We need to re-display the form with errors!\r\n            this.modal.setBody(this.getBody(data));\r\n            $(\"[data-original-student]\").trigger('change');\r\n        };\r\n\r\n        /**\r\n         * Private method\r\n         *\r\n         * @method submitFormAjax\r\n         * @private\r\n         * @param {Event} e Form submission event.\r\n         */\r\n        NewGroup.prototype.submitFormAjax = function(e) {\r\n            // We don't want to do a real form submission.\r\n            e.preventDefault();\r\n\r\n            var changeEvent = document.createEvent('HTMLEvents');\r\n            changeEvent.initEvent('change', true, true);\r\n\r\n            // Prompt all inputs to run their validation functions.\r\n            // Normally this would happen when the form is submitted, but\r\n            // since we aren't submitting the form normally we need to run client side\r\n            // validation.\r\n            this.modal.getRoot().find(':input').each(function(index, element) {\r\n                element.dispatchEvent(changeEvent);\r\n            });\r\n\r\n            // Now the change events have run, see if there are any \"invalid\" form fields.\r\n            var invalid = $.merge(\r\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\r\n                this.modal.getRoot().find('.error')\r\n            );\r\n\r\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\r\n            if (invalid.length) {\r\n                invalid.first().focus();\r\n                return;\r\n            }\r\n\r\n            // Convert all the form elements values to a serialised string.\r\n            var formData = this.modal.getRoot().find('form').serialize();\r\n\r\n            // Now we can continue...\r\n            Ajax.call([{\r\n                methodname: 'mod_pchat_submit_rubric_grade_form',\r\n                args: {\r\n                    contextid: this.contextid,\r\n                    jsonformdata: JSON.stringify(formData),\r\n                    studentid: parseInt(this.studentid) ?? 0,\r\n                    cmid: parseInt(this.cmid) ?? 0\r\n                },\r\n                done: this.handleFormSubmissionResponse.bind(this, formData),\r\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\r\n            }]);\r\n\r\n            this.modal.hide();\r\n        };\r\n\r\n        /**\r\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\r\n         *\r\n         * @method submitForm\r\n         * @param {Event} e Form submission event.\r\n         * @private\r\n         */\r\n        NewGroup.prototype.submitForm = function(e) {\r\n            e.preventDefault();\r\n            this.modal.getRoot().find('form').submit();\r\n        };\r\n\r\n        return /** @alias module:core_group/newgroup */ {\r\n            // Public variables and functions.\r\n            /**\r\n             * Attach event listeners to initialise this module.\r\n             *\r\n             * @method init\r\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\r\n             * @param {int} contextid The contextid for the course.\r\n             * @return {Promise}\r\n             */\r\n            init: function(selector, contextid) {\r\n                return new NewGroup(selector, contextid);\r\n            }\r\n        };\r\n    });"],"file":"newgroup.min.js"}