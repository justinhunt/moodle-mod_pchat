{"version":3,"sources":["../src/newgroup.js"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","NewGroup","selector","contextid","init","prototype","modal","studentid","attr","cmid","attemptid","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","setLarge","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","document","location","reload","handleFormSubmissionFailure","data","e","preventDefault","changeEvent","createEvent","initEvent","find","each","index","element","dispatchEvent","invalid","merge","length","first","focus","formData","serialize","call","methodname","args","done","obj","trigger","fail","submit"],"mappings":"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","sourcesContent":["/**\r\n * Add a create new group modal to the page.\r\n *\r\n * @module     core_group/newgroup\r\n * @class      NewGroup\r\n * @package    core_group\r\n * @copyright  2017 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\r\n    function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\r\n\r\n        /**\r\n         * Constructor\r\n         *\r\n         * @param {String} selector used to find triggers for the new group modal.\r\n         * @param {int} contextid\r\n         *\r\n         * Each call to init gets it's own instance of this class.\r\n         */\r\n        var NewGroup = function(selector, contextid) {\r\n            this.contextid = contextid;\r\n            this.init(selector);\r\n        };\r\n\r\n        /**\r\n         * @var {Modal} modal\r\n         * @private\r\n         */\r\n        NewGroup.prototype.modal = null;\r\n\r\n        /**\r\n         * @var {int} contextid\r\n         * @private\r\n         */\r\n        NewGroup.prototype.contextid = -1;\r\n\r\n        /**\r\n         * Initialise the class.\r\n         *\r\n         * @param {String} selector used to find triggers for the new group modal.\r\n         * @private\r\n         * @return {Promise}\r\n         */\r\n        NewGroup.prototype.init = function(selector) {\r\n            var triggers = selector;\r\n            this.studentid = $(selector).attr('data-student-id');\r\n            this.cmid = $(selector).attr('data-cm-id');\r\n            this.attemptid = $(selector).attr('data-attempt-id');\r\n\r\n            // Fetch the title string.\r\n            return Str.get_string('creategroup', 'core_group').then(function(title) {\r\n                // Create the modal.\r\n                return ModalFactory.create({\r\n                    type: ModalFactory.types.SAVE_CANCEL,\r\n                    title: title,\r\n                    body: this.getBody()\r\n                }, triggers);\r\n            }.bind(this)).then(function(modal) {\r\n                // Keep a reference to the modal.\r\n                this.modal = modal;\r\n\r\n                // Forms are big, we want a big modal.\r\n                this.modal.setLarge();\r\n\r\n                // We want to reset the form every time it is opened.\r\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\r\n                    this.modal.setBody(this.getBody());\r\n                }.bind(this));\r\n\r\n                // We want to hide the submit buttons every time it is opened.\r\n                this.modal.getRoot().on(ModalEvents.shown, function() {\r\n                    this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\r\n                }.bind(this));\r\n\r\n\r\n                // We catch the modal save event, and use it to submit the form inside the modal.\r\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\r\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\r\n                // We also catch the form submit event and use it to submit the form with ajax.\r\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\r\n\r\n                return this.modal;\r\n            }.bind(this));\r\n        };\r\n\r\n        /**\r\n         * @method getBody\r\n         * @private\r\n         * @return {Promise}\r\n         */\r\n        NewGroup.prototype.getBody = function(formdata) {\r\n            if (typeof formdata === \"undefined\") {\r\n                formdata = {};\r\n            }\r\n            // Get the content of the modal.\r\n            var params = {jsonformdata: JSON.stringify(formdata)};\r\n            params.studentid = this.studentid;\r\n            params.cmid = this.cmid;\r\n            params.attemptid = this.attemptid;\r\n\r\n            return Fragment.loadFragment(\r\n                'mod_pchat',\r\n                'new_group_form',\r\n                this.contextid,\r\n                params);\r\n        };\r\n\r\n        /**\r\n         * @method handleFormSubmissionResponse\r\n         * @private\r\n         * @return {Promise}\r\n         */\r\n        NewGroup.prototype.handleFormSubmissionResponse = function() {\r\n            this.modal.hide();\r\n\r\n            Y.use('moodle-core-formchangechecker', function() {\r\n                M.core_formchangechecker.reset_form_dirty_state();\r\n            });\r\n\r\n            document.location.reload();\r\n        };\r\n\r\n        /**\r\n         * @method handleFormSubmissionFailure\r\n         * @private\r\n         * @return {Promise}\r\n         */\r\n        NewGroup.prototype.handleFormSubmissionFailure = function(data) {\r\n            // Oh noes! Epic fail :(\r\n            // Ah wait - this is normal. We need to re-display the form with errors!\r\n            this.modal.setBody(this.getBody(data));\r\n            debugger;\r\n        };\r\n\r\n        /**\r\n         * Private method\r\n         *\r\n         * @method submitFormAjax\r\n         * @private\r\n         * @param {Event} e Form submission event.\r\n         */\r\n        NewGroup.prototype.submitFormAjax = function(e) {\r\n            // We don't want to do a real form submission.\r\n            e.preventDefault();\r\n\r\n            var changeEvent = document.createEvent('HTMLEvents');\r\n            changeEvent.initEvent('change', true, true);\r\n\r\n            // Prompt all inputs to run their validation functions.\r\n            // Normally this would happen when the form is submitted, but\r\n            // since we aren't submitting the form normally we need to run client side\r\n            // validation.\r\n            this.modal.getRoot().find(':input').each(function(index, element) {\r\n                element.dispatchEvent(changeEvent);\r\n            });\r\n\r\n            // Now the change events have run, see if there are any \"invalid\" form fields.\r\n            var invalid = $.merge(\r\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\r\n                this.modal.getRoot().find('.error')\r\n            );\r\n\r\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\r\n            if (invalid.length) {\r\n                invalid.first().focus();\r\n                return;\r\n            }\r\n\r\n            // Convert all the form elements values to a serialised string.\r\n            var formData = this.modal.getRoot().find('form').serialize();\r\n\r\n            // Now we can continue...\r\n            Ajax.call([{\r\n                methodname: 'core_group_submit_create_group_form',\r\n                args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\r\n                done: function (obj) {\r\n                    obj.handleFormSubmissionResponse.bind(obj, formData);\r\n                    $(\"[data-original-student]\").trigger('change');\r\n                    debugger;\r\n                },\r\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\r\n            }]);\r\n\r\n            this.modal.hide();\r\n        };\r\n\r\n        /**\r\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\r\n         *\r\n         * @method submitForm\r\n         * @param {Event} e Form submission event.\r\n         * @private\r\n         */\r\n        NewGroup.prototype.submitForm = function(e) {\r\n            e.preventDefault();\r\n            this.modal.getRoot().find('form').submit();\r\n        };\r\n\r\n        return /** @alias module:core_group/newgroup */ {\r\n            // Public variables and functions.\r\n            /**\r\n             * Attach event listeners to initialise this module.\r\n             *\r\n             * @method init\r\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\r\n             * @param {int} contextid The contextid for the course.\r\n             * @return {Promise}\r\n             */\r\n            init: function(selector, contextid) {\r\n                return new NewGroup(selector, contextid);\r\n            }\r\n        };\r\n    });"],"file":"newgroup.min.js"}