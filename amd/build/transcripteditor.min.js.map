{"version":3,"sources":["../src/transcripteditor.js"],"names":["define","$","log","constants","def","notification","previewhelper","conversationeditor","vtthelper","debug","init","opts","that","controls","init_controls","register_events","mediatype_audio","mediaurl","transcriptjson","updatecontrol","val","loadMedia","loadJSON","doSave","transcript","fetchTranscriptionData","JSON","stringify","savebutton","removeallbutton","setMediaURL","loadVTT","vtturl","get","thevtt","convertVttToJson","resetData","json","parse"],"mappings":"AAAAA,OAAM,8BAAC,CAAC,QAAD,CAAU,UAAV,CAAsB,iCAAtB,CAAwD,uBAAxD,CAAiF,mBAAjF,CAAsG,yBAAtG,CAAiI,8BAAjI,CAAkK,qBAAlK,CAAD,CACF,SAASC,CAAT,CAAWC,CAAX,CAAgBC,CAAhB,CAA2BC,CAA3B,CAA+BC,CAA/B,CAA4CC,CAA5C,CAA2DC,CAA3D,CAA+EC,CAA/E,CAA0F,CAC1F,aAMAN,CAAG,CAACO,KAAJ,CAAU,uCAAV,EAEA,MAAM,CAEFC,IAAI,CAAE,cAASC,CAAT,CAAe,IACbC,CAAAA,CAAI,CAAC,IADQ,CAEbC,CAAQ,CAAG,KAAKC,aAAL,CAAmBH,CAAnB,CAFE,CAGjB,KAAKI,eAAL,CAAqBJ,CAArB,CAA0BE,CAA1B,EACAN,CAAkB,CAACG,IAAnB,CAAwB,EAAxB,CAA2BP,CAAS,CAACa,eAArC,EACAV,CAAa,CAACI,IAAd,GALiB,GAMbO,CAAAA,CAAQ,CAAGN,CAAI,SANF,CAObO,CAAc,CAAGL,CAAQ,CAACM,aAAT,CAAuBC,GAAvB,EAPJ,CAUjB,KAAKC,SAAL,CAAeJ,CAAf,EACA,KAAKK,QAAL,CAAcJ,CAAd,EAIAX,CAAkB,CAACgB,MAAnB,CAA0B,UAAU,CAChC,GAAIC,CAAAA,CAAU,CAAGjB,CAAkB,CAACkB,sBAAnB,EAAjB,CACAZ,CAAQ,CAACM,aAAT,CAAuBC,GAAvB,CAA2BM,IAAI,CAACC,SAAL,CAAeH,CAAf,CAA3B,CACH,CACJ,CArBC,CAuBFV,aAAa,CAAE,uBAASH,CAAT,CAAc,CACzB,GAAIE,CAAAA,CAAQ,CAAE,CACLM,aADK,CACWlB,CAAC,CAAC,WAAYU,CAAI,cAAhB,CAAoC,KAArC,CADZ,CAELiB,UAFK,CAEQ3B,CAAC,CAACE,CAAS,CAACyB,UAAX,CAFT,CAGLC,eAHK,CAGa5B,CAAC,CAACE,CAAS,CAAC0B,eAAX,CAHd,CAAd,CAKA,MAAOhB,CAAAA,CAEV,CA/BC,CAiCFE,eAAe,CAAE,0BAAwB,CAC1B,IACd,CAnCC,CAqCFM,SAAS,CAAE,mBAASJ,CAAT,CAAkB,CACzB,GAAGA,CAAQ,EAAiB,EAAb,GAAAA,CAAf,CAA+B,CAC3BX,CAAa,CAACwB,WAAd,CAA0Bb,CAA1B,CACH,CACJ,CAzCC,CA0CFc,OAAO,CAAE,iBAASC,CAAT,CAAgB,CACrB,GAAGA,CAAM,EAAe,EAAX,GAAAA,CAAb,CAA2B,CACvB/B,CAAC,CAACgC,GAAF,CAAMD,CAAN,CAAc,SAASE,CAAT,CAAiB,CAC3B,GAAIV,CAAAA,CAAU,CAAGhB,CAAS,CAAC2B,gBAAV,CAA2BD,CAA3B,CAAjB,CACA3B,CAAkB,CAAC6B,SAAnB,CAA6BZ,CAA7B,CACH,CAHD,CAIH,CACJ,CAjDC,CAkDFF,QAAQ,CAAE,kBAASe,CAAT,CAAc,CACpB,GAAGA,CAAI,EAAa,EAAT,GAAAA,CAAX,CAAuB,CACnB,GAAIb,CAAAA,CAAU,CAAGE,IAAI,CAACY,KAAL,CAAWD,CAAX,CAAjB,CACA9B,CAAkB,CAAC6B,SAAnB,CAA6BZ,CAA7B,CACH,CACJ,CAvDC,CA2DT,CArEK,CAAN","sourcesContent":["define(['jquery','core/log', \"mod_pchat/conversationconstants\",'mod_pchat/definitions', 'core/notification', 'mod_pchat/previewhelper', 'mod_pchat/conversationeditor',  'mod_pchat/vtthelper'],\r\n    function($,log, constants, def,notification,previewhelper, conversationeditor, vtthelper) {\r\n    \"use strict\"; // jshint ;_;\r\n\r\n/*\r\nThis file contains class and ID definitions.\r\n */\r\n\r\n    log.debug('PChat Transcript Editor: initialising');\r\n\r\n    return{\r\n\r\n        init: function(opts) {\r\n            var that=this;\r\n            var controls = this.init_controls(opts);\r\n            this.register_events(opts,controls);\r\n            conversationeditor.init([],constants.mediatype_audio);\r\n            previewhelper.init();\r\n            var mediaurl = opts['mediaurl'];\r\n            var transcriptjson = controls.updatecontrol.val();\r\n            var vtturl = mediaurl + '.vtt';\r\n\r\n            this.loadMedia(mediaurl);\r\n            this.loadJSON(transcriptjson);\r\n            //this.loadVTT(vtturl);\r\n\r\n            //this will poke transcription data into our form field for saving\r\n            conversationeditor.doSave=function(){\r\n                var transcript = conversationeditor.fetchTranscriptionData();\r\n                controls.updatecontrol.val(JSON.stringify(transcript));\r\n            }\r\n        },\r\n\r\n        init_controls: function(opts){\r\n            var controls ={};\r\n            controls.updatecontrol = $('[name=\"' + opts['updatecontrol'] + '\"]');\r\n            controls.savebutton = $(constants.savebutton);\r\n            controls.removeallbutton = $(constants.removeallbutton);\r\n\r\n            return controls;\r\n\r\n        },\r\n\r\n        register_events: function(opts, controls){\r\n            var that = this;\r\n        },\r\n\r\n        loadMedia: function(mediaurl){\r\n            if(mediaurl && mediaurl !== ''){\r\n                previewhelper.setMediaURL(mediaurl);\r\n            }\r\n        },\r\n        loadVTT: function(vtturl){\r\n            if(vtturl && vtturl !== ''){\r\n                $.get(vtturl, function(thevtt) {\r\n                    var transcript = vtthelper.convertVttToJson(thevtt);\r\n                    conversationeditor.resetData(transcript);\r\n                });\r\n            }\r\n        },\r\n        loadJSON: function(json){\r\n            if(json && json !== ''){\r\n                var transcript = JSON.parse(json);\r\n                conversationeditor.resetData(transcript);\r\n            }\r\n        }\r\n\r\n};//end of return value\r\n\r\n});\r\n\r\n"],"file":"transcripteditor.min.js"}