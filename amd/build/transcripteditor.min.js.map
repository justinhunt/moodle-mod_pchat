{"version":3,"file":"transcripteditor.min.js","sources":["../src/transcripteditor.js"],"sourcesContent":["define(['jquery','core/log', \"mod_pchat/conversationconstants\",'mod_pchat/definitions', 'core/notification', 'mod_pchat/previewhelper', 'mod_pchat/conversationeditor',  'mod_pchat/vtthelper'],\n    function($,log, constants, def,notification,previewhelper, conversationeditor, vtthelper) {\n    \"use strict\"; // jshint ;_;\n\n/*\nThis file contains class and ID definitions.\n */\n\n    log.debug('PChat Transcript Editor: initialising');\n\n    return{\n\n        init: function(opts) {\n            var that=this;\n            var controls = this.init_controls(opts);\n            this.register_events(opts,controls);\n            conversationeditor.init([],constants.mediatype_audio);\n            previewhelper.init();\n            var mediaurl = opts['mediaurl'];\n            var transcriptjson = controls.updatecontrol.val();\n            var vtturl = mediaurl + '.vtt';\n\n            this.loadMedia(mediaurl);\n            this.loadJSON(transcriptjson);\n            //this.loadVTT(vtturl);\n\n            //this will poke transcription data into our form field for saving\n            conversationeditor.doSave=function(){\n                var transcript = conversationeditor.fetchTranscriptionData();\n                controls.updatecontrol.val(JSON.stringify(transcript));\n            }\n        },\n\n        init_controls: function(opts){\n            var controls ={};\n            controls.updatecontrol = $('[name=\"' + opts['updatecontrol'] + '\"]');\n            controls.savebutton = $(constants.savebutton);\n            controls.removeallbutton = $(constants.removeallbutton);\n\n            return controls;\n\n        },\n\n        register_events: function(opts, controls){\n            var that = this;\n        },\n\n        loadMedia: function(mediaurl){\n            if(mediaurl && mediaurl !== ''){\n                previewhelper.setMediaURL(mediaurl);\n            }\n        },\n        loadVTT: function(vtturl){\n            if(vtturl && vtturl !== ''){\n                $.get(vtturl, function(thevtt) {\n                    var transcript = vtthelper.convertVttToJson(thevtt);\n                    conversationeditor.resetData(transcript);\n                });\n            }\n        },\n        loadJSON: function(json){\n            if(json && json !== ''){\n                var transcript = JSON.parse(json);\n                conversationeditor.resetData(transcript);\n            }\n        }\n\n};//end of return value\n\n});\n\n"],"names":["define","$","log","constants","def","notification","previewhelper","conversationeditor","vtthelper","debug","init","opts","controls","this","init_controls","register_events","mediatype_audio","mediaurl","transcriptjson","updatecontrol","val","loadMedia","loadJSON","doSave","transcript","fetchTranscriptionData","JSON","stringify","savebutton","removeallbutton","setMediaURL","loadVTT","vtturl","get","thevtt","convertVttToJson","resetData","json","parse"],"mappings":"AAAAA,oCAAO,CAAC,SAAS,WAAY,kCAAkC,wBAAyB,oBAAqB,0BAA2B,+BAAiC,wBACrK,SAASC,EAAEC,IAAKC,UAAWC,IAAIC,aAAaC,cAAeC,mBAAoBC,kBAO/EN,IAAIO,MAAM,yCAEJ,CAEFC,KAAM,SAASC,UAEPC,SAAWC,KAAKC,cAAcH,WAC7BI,gBAAgBJ,KAAKC,UAC1BL,mBAAmBG,KAAK,GAAGP,UAAUa,iBACrCV,cAAcI,WACVO,SAAWN,KAAI,SACfO,eAAiBN,SAASO,cAAcC,WAGvCC,UAAUJ,eACVK,SAASJ,gBAIdX,mBAAmBgB,OAAO,eAClBC,WAAajB,mBAAmBkB,yBACpCb,SAASO,cAAcC,IAAIM,KAAKC,UAAUH,eAIlDV,cAAe,SAASH,UAChBC,SAAU,UACdA,SAASO,cAAgBlB,EAAE,UAAYU,KAAI,cAAoB,MAC/DC,SAASgB,WAAa3B,EAAEE,UAAUyB,YAClChB,SAASiB,gBAAkB5B,EAAEE,UAAU0B,iBAEhCjB,UAIXG,gBAAiB,SAASJ,KAAMC,YAIhCS,UAAW,SAASJ,UACbA,UAAyB,KAAbA,UACXX,cAAcwB,YAAYb,WAGlCc,QAAS,SAASC,QACXA,QAAqB,KAAXA,QACT/B,EAAEgC,IAAID,QAAQ,SAASE,YACfV,WAAahB,UAAU2B,iBAAiBD,QAC5C3B,mBAAmB6B,UAAUZ,gBAIzCF,SAAU,SAASe,SACZA,MAAiB,KAATA,KAAY,KACfb,WAAaE,KAAKY,MAAMD,MAC5B9B,mBAAmB6B,UAAUZ"}