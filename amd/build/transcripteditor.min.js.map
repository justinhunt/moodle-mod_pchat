{"version":3,"sources":["../src/transcripteditor.js"],"names":["define","$","log","constants","def","notification","previewhelper","conversationeditor","vtthelper","debug","init","opts","that","controls","init_controls","register_events","mediatype_audio","mediaurl","transcriptjson","updatecontrol","val","loadMedia","loadJSON","doSave","transcript","fetchTranscriptionData","JSON","stringify","savebutton","removeallbutton","setMediaURL","loadVTT","vtturl","get","thevtt","convertVttToJson","resetData","json","parse"],"mappings":"AAAAA,OAAM,8BAAC,CAAC,QAAD,CAAU,UAAV,CAAsB,iCAAtB,CAAwD,uBAAxD,CAAiF,mBAAjF,CAAsG,yBAAtG,CAAiI,8BAAjI,CAAkK,qBAAlK,CAAD,CACF,SAASC,CAAT,CAAWC,CAAX,CAAgBC,CAAhB,CAA2BC,CAA3B,CAA+BC,CAA/B,CAA4CC,CAA5C,CAA2DC,CAA3D,CAA+EC,CAA/E,CAA0F,CAC1F,aAMAN,CAAG,CAACO,KAAJ,CAAU,uCAAV,EAEA,MAAM,CAEFC,IAAI,CAAE,cAASC,CAAT,CAAe,IACbC,CAAAA,CAAI,CAAC,IADQ,CAEbC,CAAQ,CAAG,KAAKC,aAAL,CAAmBH,CAAnB,CAFE,CAGjB,KAAKI,eAAL,CAAqBJ,CAArB,CAA0BE,CAA1B,EACAN,CAAkB,CAACG,IAAnB,CAAwB,EAAxB,CAA2BP,CAAS,CAACa,eAArC,EACAV,CAAa,CAACI,IAAd,GALiB,GAMbO,CAAAA,CAAQ,CAAGN,CAAI,SANF,CAObO,CAAc,CAAGL,CAAQ,CAACM,aAAT,CAAuBC,GAAvB,EAPJ,CAUjB,KAAKC,SAAL,CAAeJ,CAAf,EACA,KAAKK,QAAL,CAAcJ,CAAd,EAIAX,CAAkB,CAACgB,MAAnB,CAA0B,UAAU,CAChC,GAAIC,CAAAA,CAAU,CAAGjB,CAAkB,CAACkB,sBAAnB,EAAjB,CACAZ,CAAQ,CAACM,aAAT,CAAuBC,GAAvB,CAA2BM,IAAI,CAACC,SAAL,CAAeH,CAAf,CAA3B,CACH,CACJ,CArBC,CAuBFV,aAAa,CAAE,uBAASH,CAAT,CAAc,CACzB,GAAIE,CAAAA,CAAQ,CAAE,CACLM,aADK,CACWlB,CAAC,CAAC,WAAYU,CAAI,cAAhB,CAAoC,KAArC,CADZ,CAELiB,UAFK,CAEQ3B,CAAC,CAACE,CAAS,CAACyB,UAAX,CAFT,CAGLC,eAHK,CAGa5B,CAAC,CAACE,CAAS,CAAC0B,eAAX,CAHd,CAAd,CAKA,MAAOhB,CAAAA,CAEV,CA/BC,CAiCFE,eAAe,CAAE,0BAAwB,CAC1B,IACd,CAnCC,CAqCFM,SAAS,CAAE,mBAASJ,CAAT,CAAkB,CACzB,GAAGA,CAAQ,EAAiB,EAAb,GAAAA,CAAf,CAA+B,CAC3BX,CAAa,CAACwB,WAAd,CAA0Bb,CAA1B,CACH,CACJ,CAzCC,CA0CFc,OAAO,CAAE,iBAASC,CAAT,CAAgB,CACrB,GAAGA,CAAM,EAAe,EAAX,GAAAA,CAAb,CAA2B,CACvB/B,CAAC,CAACgC,GAAF,CAAMD,CAAN,CAAc,SAASE,CAAT,CAAiB,CAC3B,GAAIV,CAAAA,CAAU,CAAGhB,CAAS,CAAC2B,gBAAV,CAA2BD,CAA3B,CAAjB,CACA3B,CAAkB,CAAC6B,SAAnB,CAA6BZ,CAA7B,CACH,CAHD,CAIH,CACJ,CAjDC,CAkDFF,QAAQ,CAAE,kBAASe,CAAT,CAAc,CACpB,GAAGA,CAAI,EAAa,EAAT,GAAAA,CAAX,CAAuB,CACnB,GAAIb,CAAAA,CAAU,CAAGE,IAAI,CAACY,KAAL,CAAWD,CAAX,CAAjB,CACA9B,CAAkB,CAAC6B,SAAnB,CAA6BZ,CAA7B,CACH,CACJ,CAvDC,CA2DT,CArEK,CAAN","sourcesContent":["define(['jquery','core/log', \"mod_pchat/conversationconstants\",'mod_pchat/definitions', 'core/notification', 'mod_pchat/previewhelper', 'mod_pchat/conversationeditor',  'mod_pchat/vtthelper'],\n    function($,log, constants, def,notification,previewhelper, conversationeditor, vtthelper) {\n    \"use strict\"; // jshint ;_;\n\n/*\nThis file contains class and ID definitions.\n */\n\n    log.debug('PChat Transcript Editor: initialising');\n\n    return{\n\n        init: function(opts) {\n            var that=this;\n            var controls = this.init_controls(opts);\n            this.register_events(opts,controls);\n            conversationeditor.init([],constants.mediatype_audio);\n            previewhelper.init();\n            var mediaurl = opts['mediaurl'];\n            var transcriptjson = controls.updatecontrol.val();\n            var vtturl = mediaurl + '.vtt';\n\n            this.loadMedia(mediaurl);\n            this.loadJSON(transcriptjson);\n            //this.loadVTT(vtturl);\n\n            //this will poke transcription data into our form field for saving\n            conversationeditor.doSave=function(){\n                var transcript = conversationeditor.fetchTranscriptionData();\n                controls.updatecontrol.val(JSON.stringify(transcript));\n            }\n        },\n\n        init_controls: function(opts){\n            var controls ={};\n            controls.updatecontrol = $('[name=\"' + opts['updatecontrol'] + '\"]');\n            controls.savebutton = $(constants.savebutton);\n            controls.removeallbutton = $(constants.removeallbutton);\n\n            return controls;\n\n        },\n\n        register_events: function(opts, controls){\n            var that = this;\n        },\n\n        loadMedia: function(mediaurl){\n            if(mediaurl && mediaurl !== ''){\n                previewhelper.setMediaURL(mediaurl);\n            }\n        },\n        loadVTT: function(vtturl){\n            if(vtturl && vtturl !== ''){\n                $.get(vtturl, function(thevtt) {\n                    var transcript = vtthelper.convertVttToJson(thevtt);\n                    conversationeditor.resetData(transcript);\n                });\n            }\n        },\n        loadJSON: function(json){\n            if(json && json !== ''){\n                var transcript = JSON.parse(json);\n                conversationeditor.resetData(transcript);\n            }\n        }\n\n};//end of return value\n\n});\n\n"],"file":"transcripteditor.min.js"}