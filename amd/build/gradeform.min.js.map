{"version":3,"sources":["../src/gradeform.js"],"names":["define","$","log","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","GradeForm","selector","contextid","preinit","prototype","modal","that","get_string","then","title","formtitle","on","e","preventDefault","studentid","attr","cmid","create","type","types","SAVE_CANCEL","body","getBody","setLarge","getRoot","hidden","setBody","bind","shown","append","save","submitForm","submitFormAjax","show","init","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","element","promises","call","methodname","args","userid","done","response","debug","find","html","rubricscore","feedback","fail","handleFormSubmissionFailure","data","trigger","changeEvent","document","createEvent","initEvent","each","index","dispatchEvent","invalid","merge","length","first","focus","formData","serialize","parseInt","submit"],"mappings":"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","sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     mod_pchat/gradeform\n * @class      GradeForm\n * @package    mod_pchat\n * @copyright  PoodLL\n * @copyright  Based on: 2017 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/log','core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n    function($, log ,Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n        /**\n         * Constructor\n         *\n         * @param {String} selector used to find triggers for the new grade modal.\n         * @param {int} contextid\n         *\n         * Each call to init gets it's own instance of this class.\n         */\n        const GradeForm = function(selector, contextid) {\n            this.contextid = contextid;\n            this.preinit(selector);\n        };\n\n        /**\n         * @let {Modal} modal\n         * @private\n         */\n        GradeForm.prototype.modal = null;\n\n        /**\n         * @let {int} contextid\n         * @private\n         */\n        GradeForm.prototype.contextid = -1;\n\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector used to find triggers for the new grade modal.\n         * @private\n         * @return {Promise}\n         */\n        GradeForm.prototype.preinit = function(selector) {\n            var triggers = selector;\n            var that = this;\n\n            Str.get_string('dorubricgrade', 'mod_pchat').then(function(title){that.formtitle=title;});\n            // Fetch the title string.\n            $(triggers).on('click', function(e){\n                e.preventDefault();\n\n                that.studentid = $(this).attr('data-student-id');\n                that.cmid = $(this).attr('data-cm-id');\n\n                // Create the modal.\n                ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: that.formtitle,\n                    body: that.getBody()\n                }).then(function(modal) {\n                    // Keep a reference to the modal.\n                    that.modal = modal;\n\n                    // Forms are big, we want a big modal.\n                    that.modal.setLarge();\n\n                    // We want to reset the form every time it is opened.\n                    that.modal.getRoot().on(ModalEvents.hidden, function () {\n                        that.modal.setBody(that.getBody());\n                    }.bind(that));\n\n                    // We want to hide the submit buttons every time it is opened.\n                    that.modal.getRoot().on(ModalEvents.shown, function () {\n                        that.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                    });\n\n\n                    // We catch the modal save event, and use it to submit the form inside the modal.\n                    // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                    that.modal.getRoot().on(ModalEvents.save, that.submitForm.bind(that));\n                    // We also catch the form submit event and use it to submit the form with ajax.\n                    that.modal.getRoot().on('submit', 'form', that.submitFormAjax.bind(that));\n                    that.modal.show();\n                    return that.modal;\n                });//end of then(function(modal)\n            });//end of click event\n        };\n\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector used to find triggers for the new grade modal.\n         * @private\n         * @return {Promise}\n         */\n        GradeForm.prototype.init = function(selector) {\n            var triggers = selector;\n            this.studentid = $(selector).attr('data-student-id');\n            this.cmid = $(selector).attr('data-cm-id');\n\n            // Fetch the title string.\n            return Str.get_string('creategroup', 'core_group').then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: this.getBody()\n                }, triggers);\n            }.bind(this)).then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // Forms are big, we want a big modal.\n                this.modal.setLarge();\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.setBody(this.getBody());\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                this.modal.getRoot().on(ModalEvents.shown, function() {\n                    this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                return this.modal;\n            }.bind(this));\n        };\n\n        /**\n         * @method getBody\n         * @private\n         * @return {Promise}\n         */\n        GradeForm.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata)};\n            params.studentid = this.studentid;\n            params.cmid = this.cmid;\n\n            return Fragment.loadFragment(\n                'mod_pchat',\n                'new_grade_form',\n                this.contextid,\n                params);\n        };\n\n        /**\n         * @method handleFormSubmissionResponse\n         * @private\n         * @return {Promise}\n         */\n        GradeForm.prototype.handleFormSubmissionResponse = function() {\n            this.modal.hide();\n\n            Y.use('moodle-core-formchangechecker', function() {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n\n         //   $(\"[data-original-student]\").trigger('change');\n\n            var element = $(\".card[data-original-student='\" + this.studentid + \"']\");\n            var promises = Ajax.call([\n                { methodname: 'mod_pchat_get_grade_submission', args: {  userid: this.studentid, cmid: this.cmid } }]);\n\n            promises[0].done(function(response) {\n                log.debug('promises-done');\n                log.debug(response);\n                if(response && response.response[0]) {\n                    log.debug(response.response[0]);\n                    log.debug(element);\n                    $(element).find('.chatrubricscore').html(response.response[0].rubricscore);\n                    $(element).find('.chatfeedback').html(response.response[0].feedback);\n                }\n            }).fail(function(ex) {\n                // @todo do something with the exception\n            });\n\n\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         * @private\n         * @return {Promise}\n         */\n        GradeForm.prototype.handleFormSubmissionFailure = function(data) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n            $(\"[data-original-student]\").trigger('change');\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         * @private\n         * @param {Event} e Form submission event.\n         */\n        GradeForm.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            var changeEvent = document.createEvent('HTMLEvents');\n            changeEvent.initEvent('change', true, true);\n\n            // Prompt all inputs to run their validation functions.\n            // Normally this would happen when the form is submitted, but\n            // since we aren't submitting the form normally we need to run client side\n            // validation.\n            this.modal.getRoot().find(':input').each(function(index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            var invalid = $.merge(\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n                this.modal.getRoot().find('.error')\n            );\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'mod_pchat_submit_create_grade_form',\n                args: {\n                    contextid: this.contextid,\n                    jsonformdata: JSON.stringify(formData),\n                    studentid: parseInt(this.studentid) ? parseInt(this.studentid) : 0,\n                    cmid: parseInt(this.cmid) ? parseInt(this.cmid) : 0\n                },\n                done: this.handleFormSubmissionResponse.bind(this, formData),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n\n            this.modal.hide();\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        GradeForm.prototype.submitForm = function(e) {\n            e.preventDefault();\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return /** @alias module:mod_pchat/gradeform */ {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @return {Promise}\n             */\n            init: function(selector, contextid) {\n                return new GradeForm(selector, contextid);\n            }\n        };\n    });"],"file":"gradeform.min.js"}