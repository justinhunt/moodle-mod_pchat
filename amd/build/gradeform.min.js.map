{"version":3,"file":"gradeform.min.js","sources":["../src/gradeform.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     mod_pchat/gradeform\n * @class      GradeForm\n * @package    mod_pchat\n * @copyright  PoodLL\n * @copyright  Based on: 2017 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/log','core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n    function($, log ,Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n        /**\n         * Constructor\n         *\n         * @param {String} selector used to find triggers for the new grade modal.\n         * @param {int} contextid\n         * @param {String} grademethod (simple or rubric)\n         *\n         * Each call to init gets it's own instance of this class.\n         */\n        const GradeForm = function(selector, contextid, grademethod) {\n            this.contextid = contextid;\n            this.grademethod = grademethod;\n            this.preinit(selector);\n        };\n\n        /**\n         * @let {Modal} modal\n         * @private\n         */\n        GradeForm.prototype.modal = null;\n\n        /**\n         * @let {int} contextid\n         * @private\n         */\n        GradeForm.prototype.contextid = -1;\n\n\n        /**\n         * @let {int} contextid\n         * @private\n         */\n        GradeForm.prototype.grademethod = 'simple';//or rubric\n\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector used to find triggers for the new grade modal.\n         * @private\n         * @return {Promise}\n         */\n        GradeForm.prototype.preinit = function(selector) {\n            var triggers = selector;\n            var that = this;\n\n            Str.get_string('dorubricgrade', 'mod_pchat').then(function(title){that.formtitle=title;});\n            // Fetch the title string.\n            $(triggers).on('click', function(e){\n                e.preventDefault();\n\n                that.studentid = $(this).attr('data-student-id');\n                that.cmid = $(this).attr('data-cm-id');\n\n                // Create the modal.\n                ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: that.formtitle,\n                    body: that.getBody()\n                }).then(function(modal) {\n                    // Keep a reference to the modal.\n                    that.modal = modal;\n\n                    // Forms are big, we want a big modal.\n                    that.modal.setLarge();\n                    //sojo wants a massive one\n                    that.modal.getModal().addClass('modal-xl');\n\n                    // We want to reset the form every time it is opened.\n                    that.modal.getRoot().on(ModalEvents.hidden, function () {\n                        that.modal.setBody(that.getBody());\n                    }.bind(that));\n\n                    // We want to hide the submit buttons every time it is opened.\n                    that.modal.getRoot().on(ModalEvents.shown, function () {\n                        that.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                    });\n\n\n                    // We catch the modal save event, and use it to submit the form inside the modal.\n                    // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                    that.modal.getRoot().on(ModalEvents.save, that.submitForm.bind(that));\n                    // We also catch the form submit event and use it to submit the form with ajax.\n                    that.modal.getRoot().on('submit', 'form', that.submitFormAjax.bind(that));\n                    that.modal.show();\n                    return that.modal;\n                });//end of then(function(modal)\n            });//end of click event\n        };\n\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector used to find triggers for the new grade modal.\n         * @private\n         * @return {Promise}\n         */\n        GradeForm.prototype.init = function(selector) {\n            var triggers = selector;\n            this.studentid = $(selector).attr('data-student-id');\n            this.cmid = $(selector).attr('data-cm-id');\n            // Fetch the title string.\n            return Str.get_string('creategroup', 'core_group').then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: this.getBody()\n                }, triggers);\n            }.bind(this)).then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // Forms are big, we want a big modal.\n                this.modal.setLarge();\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.setBody(this.getBody());\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                this.modal.getRoot().on(ModalEvents.shown, function() {\n                    this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                return this.modal;\n            }.bind(this));\n        };\n\n        /**\n         * @method getBody\n         * @private\n         * @return {Promise}\n         */\n        GradeForm.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata)};\n            params.studentid = this.studentid;\n            params.cmid = this.cmid;\n            var theform = 'simple_grade_form';\n            if(this.grademethod==='rubric'){\n                theform = 'rubric_grade_form';\n            }\n\n            return Fragment.loadFragment(\n                'mod_pchat',\n                theform,\n                this.contextid,\n                params);\n        };\n\n        /**\n         * @method handleFormSubmissionResponse\n         * @private\n         * @return {Promise}\n         */\n        GradeForm.prototype.handleFormSubmissionResponse = function() {\n            this.modal.hide();\n\n            Y.use('moodle-core-formchangechecker', function() {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n\n         //   $(\"[data-original-student]\").trigger('change');\n\n            var element = $(\".card[data-original-student='\" + this.studentid + \"']\");\n            var promises = Ajax.call([\n                { methodname: 'mod_pchat_get_grade_submission', args: {  userid: this.studentid, cmid: this.cmid } }]);\n\n            promises[0].done(function(response) {\n                log.debug('promises-done');\n                log.debug(response);\n                if(response && response.response[0]) {\n                    log.debug(response.response[0]);\n                    log.debug(element);\n                    $(element).find('.chat_rubricscore').html(response.response[0].rubricscore);\n                    $(element).find('.chat_feedback').html(response.response[0].feedback);\n                }\n            }).fail(function(ex) {\n                // @todo do something with the exception\n            });\n\n\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         * @private\n         * @return {Promise}\n         */\n        GradeForm.prototype.handleFormSubmissionFailure = function(data) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         * @private\n         * @param {Event} e Form submission event.\n         */\n        GradeForm.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            var changeEvent = document.createEvent('HTMLEvents');\n            changeEvent.initEvent('change', true, true);\n\n            // Prompt all inputs to run their validation functions.\n            // Normally this would happen when the form is submitted, but\n            // since we aren't submitting the form normally we need to run client side\n            // validation.\n            this.modal.getRoot().find(':input').each(function(index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            var invalid = $.merge(\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n                this.modal.getRoot().find('.error')\n            );\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            var methodName ='mod_pchat_submit_simple_grade_form';\n            if(this.grademethod==='rubric'){\n                methodName ='mod_pchat_submit_rubric_grade_form';\n            }\n\n            // Now we can continue...\n            Ajax.call([{\n                methodname: methodName,\n                args: {\n                    contextid: this.contextid,\n                    jsonformdata: JSON.stringify(formData),\n                    studentid: parseInt(this.studentid) ? parseInt(this.studentid) : 0,\n                    cmid: parseInt(this.cmid) ? parseInt(this.cmid) : 0\n                },\n                done: this.handleFormSubmissionResponse.bind(this, formData),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n\n            // We choose NOT to hide the form in the event of fail\n            //The user must choose none or something for each of the options\n            //otherwise the page reloads and the audio playback gets reset\n            //and the user is unaware that the form submission failed\n\n           // this.modal.hide();\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        GradeForm.prototype.submitForm = function(e) {\n            e.preventDefault();\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return /** @alias module:mod_pchat/gradeform */ {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @param {String} grademethod simple or rubric\n             * @return {Promise}\n             */\n            init: function(selector, contextid,grademethod) {\n                return new GradeForm(selector, contextid, grademethod);\n            }\n        };\n    });"],"names":["define","$","log","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","GradeForm","selector","contextid","grademethod","preinit","prototype","modal","triggers","that","this","get_string","then","title","formtitle","on","e","preventDefault","studentid","attr","cmid","create","type","types","SAVE_CANCEL","body","getBody","setLarge","getModal","addClass","getRoot","hidden","setBody","bind","shown","append","save","submitForm","submitFormAjax","show","init","formdata","params","jsonformdata","JSON","stringify","theform","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","element","call","methodname","args","userid","done","response","debug","find","html","rubricscore","feedback","fail","ex","handleFormSubmissionFailure","data","changeEvent","document","createEvent","initEvent","each","index","dispatchEvent","invalid","merge","length","first","focus","formData","serialize","methodName","parseInt","submit"],"mappings":"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"}