{"version":3,"sources":["../src/gradeform.js"],"names":["define","$","log","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","GradeForm","selector","contextid","grademethod","preinit","prototype","modal","that","get_string","then","title","formtitle","on","e","preventDefault","studentid","attr","cmid","create","type","types","SAVE_CANCEL","body","getBody","setLarge","getModal","addClass","getRoot","hidden","setBody","bind","shown","append","save","submitForm","submitFormAjax","show","init","formdata","params","jsonformdata","JSON","stringify","theform","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","element","promises","call","methodname","args","userid","done","response","debug","find","html","rubricscore","feedback","fail","handleFormSubmissionFailure","data","changeEvent","document","createEvent","initEvent","each","index","dispatchEvent","invalid","merge","length","first","focus","formData","serialize","methodName","parseInt","submit"],"mappings":"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","sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     mod_pchat/gradeform\n * @class      GradeForm\n * @package    mod_pchat\n * @copyright  PoodLL\n * @copyright  Based on: 2017 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/log','core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n    function($, log ,Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n        /**\n         * Constructor\n         *\n         * @param {String} selector used to find triggers for the new grade modal.\n         * @param {int} contextid\n         * @param {String} grademethod (simple or rubric)\n         *\n         * Each call to init gets it's own instance of this class.\n         */\n        const GradeForm = function(selector, contextid, grademethod) {\n            this.contextid = contextid;\n            this.grademethod = grademethod;\n            this.preinit(selector);\n        };\n\n        /**\n         * @let {Modal} modal\n         * @private\n         */\n        GradeForm.prototype.modal = null;\n\n        /**\n         * @let {int} contextid\n         * @private\n         */\n        GradeForm.prototype.contextid = -1;\n\n\n        /**\n         * @let {int} contextid\n         * @private\n         */\n        GradeForm.prototype.grademethod = 'simple';//or rubric\n\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector used to find triggers for the new grade modal.\n         * @private\n         * @return {Promise}\n         */\n        GradeForm.prototype.preinit = function(selector) {\n            var triggers = selector;\n            var that = this;\n\n            Str.get_string('dorubricgrade', 'mod_pchat').then(function(title){that.formtitle=title;});\n            // Fetch the title string.\n            $(triggers).on('click', function(e){\n                e.preventDefault();\n\n                that.studentid = $(this).attr('data-student-id');\n                that.cmid = $(this).attr('data-cm-id');\n\n                // Create the modal.\n                ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: that.formtitle,\n                    body: that.getBody()\n                }).then(function(modal) {\n                    // Keep a reference to the modal.\n                    that.modal = modal;\n\n                    // Forms are big, we want a big modal.\n                    that.modal.setLarge();\n                    //sojo wants a massive one\n                    that.modal.getModal().addClass('modal-xl');\n\n                    // We want to reset the form every time it is opened.\n                    that.modal.getRoot().on(ModalEvents.hidden, function () {\n                        that.modal.setBody(that.getBody());\n                    }.bind(that));\n\n                    // We want to hide the submit buttons every time it is opened.\n                    that.modal.getRoot().on(ModalEvents.shown, function () {\n                        that.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                    });\n\n\n                    // We catch the modal save event, and use it to submit the form inside the modal.\n                    // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                    that.modal.getRoot().on(ModalEvents.save, that.submitForm.bind(that));\n                    // We also catch the form submit event and use it to submit the form with ajax.\n                    that.modal.getRoot().on('submit', 'form', that.submitFormAjax.bind(that));\n                    that.modal.show();\n                    return that.modal;\n                });//end of then(function(modal)\n            });//end of click event\n        };\n\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector used to find triggers for the new grade modal.\n         * @private\n         * @return {Promise}\n         */\n        GradeForm.prototype.init = function(selector) {\n            var triggers = selector;\n            this.studentid = $(selector).attr('data-student-id');\n            this.cmid = $(selector).attr('data-cm-id');\n            // Fetch the title string.\n            return Str.get_string('creategroup', 'core_group').then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: this.getBody()\n                }, triggers);\n            }.bind(this)).then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // Forms are big, we want a big modal.\n                this.modal.setLarge();\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.setBody(this.getBody());\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                this.modal.getRoot().on(ModalEvents.shown, function() {\n                    this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                return this.modal;\n            }.bind(this));\n        };\n\n        /**\n         * @method getBody\n         * @private\n         * @return {Promise}\n         */\n        GradeForm.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata)};\n            params.studentid = this.studentid;\n            params.cmid = this.cmid;\n            var theform = 'simple_grade_form';\n            if(this.grademethod==='rubric'){\n                theform = 'rubric_grade_form';\n            }\n\n            return Fragment.loadFragment(\n                'mod_pchat',\n                theform,\n                this.contextid,\n                params);\n        };\n\n        /**\n         * @method handleFormSubmissionResponse\n         * @private\n         * @return {Promise}\n         */\n        GradeForm.prototype.handleFormSubmissionResponse = function() {\n            this.modal.hide();\n\n            Y.use('moodle-core-formchangechecker', function() {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n\n         //   $(\"[data-original-student]\").trigger('change');\n\n            var element = $(\".card[data-original-student='\" + this.studentid + \"']\");\n            var promises = Ajax.call([\n                { methodname: 'mod_pchat_get_grade_submission', args: {  userid: this.studentid, cmid: this.cmid } }]);\n\n            promises[0].done(function(response) {\n                log.debug('promises-done');\n                log.debug(response);\n                if(response && response.response[0]) {\n                    log.debug(response.response[0]);\n                    log.debug(element);\n                    $(element).find('.chat_rubricscore').html(response.response[0].rubricscore);\n                    $(element).find('.chat_feedback').html(response.response[0].feedback);\n                }\n            }).fail(function(ex) {\n                // @todo do something with the exception\n            });\n\n\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         * @private\n         * @return {Promise}\n         */\n        GradeForm.prototype.handleFormSubmissionFailure = function(data) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         * @private\n         * @param {Event} e Form submission event.\n         */\n        GradeForm.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            var changeEvent = document.createEvent('HTMLEvents');\n            changeEvent.initEvent('change', true, true);\n\n            // Prompt all inputs to run their validation functions.\n            // Normally this would happen when the form is submitted, but\n            // since we aren't submitting the form normally we need to run client side\n            // validation.\n            this.modal.getRoot().find(':input').each(function(index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            var invalid = $.merge(\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n                this.modal.getRoot().find('.error')\n            );\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            var methodName ='mod_pchat_submit_simple_grade_form';\n            if(this.grademethod==='rubric'){\n                methodName ='mod_pchat_submit_rubric_grade_form';\n            }\n\n            // Now we can continue...\n            Ajax.call([{\n                methodname: methodName,\n                args: {\n                    contextid: this.contextid,\n                    jsonformdata: JSON.stringify(formData),\n                    studentid: parseInt(this.studentid) ? parseInt(this.studentid) : 0,\n                    cmid: parseInt(this.cmid) ? parseInt(this.cmid) : 0\n                },\n                done: this.handleFormSubmissionResponse.bind(this, formData),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n\n            // We choose NOT to hide the form in the event of fail\n            //The user must choose none or something for each of the options\n            //otherwise the page reloads and the audio playback gets reset\n            //and the user is unaware that the form submission failed\n\n           // this.modal.hide();\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        GradeForm.prototype.submitForm = function(e) {\n            e.preventDefault();\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return /** @alias module:mod_pchat/gradeform */ {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @param {String} grademethod simple or rubric\n             * @return {Promise}\n             */\n            init: function(selector, contextid,grademethod) {\n                return new GradeForm(selector, contextid, grademethod);\n            }\n        };\n    });"],"file":"gradeform.min.js"}