{"version":3,"sources":["../src/recorderhelper.js"],"names":["define","$","log","cloudpoodll","debug","status","init","opts","on_recording_start","on_recording_end","on_media_processing","on_speech","that","message","type","action","startbuttonclick","stopbuttonclick","alert"],"mappings":"AAAAA,OAAM,4BAAC,CAAC,QAAD,CAAU,UAAV,CAAqB,6BAArB,CAAD,CAAsD,SAASC,CAAT,CAAWC,CAAX,CAAgBC,CAAhB,CAA6B,CACrF,aAKAD,CAAG,CAACE,KAAJ,CAAU,+BAAV,EAEA,MAAM,CAEFC,MAAM,CAAE,SAFN,CAIFC,IAAI,CAAE,cAASC,CAAT,CAAcC,CAAd,CACFC,CADE,CAEFC,CAFE,CAGFC,CAHE,CAGQ,CAEV,GAAIC,CAAAA,CAAI,CAAG,IAAX,CACAT,CAAW,CAACG,IAAZ,CAAiBC,CAAI,WAArB,CAEI,SAASM,CAAT,CAAiB,CAEb,OAAOA,CAAO,CAACC,IAAf,EACI,IAAK,WAAL,CACI,GAAoB,SAAjB,GAAAD,CAAO,CAACE,MAAX,CAA8B,CAC1BH,CAAI,CAACI,gBAAL,GACAR,CAAkB,CAACK,CAAD,CAErB,CAJD,IAIM,IAAoB,SAAjB,GAAAA,CAAO,CAACE,MAAX,CAA8B,CAChCH,CAAI,CAACK,eAAL,GACAR,CAAgB,CAACI,CAAD,CACnB,CACD,MACJ,IAAK,oBAAL,CAEI,GAAgB,QAAb,EAAAD,CAAI,CAACP,MAAR,CAA0B,CACtBK,CAAmB,CAACG,CAAD,CACtB,CACDD,CAAI,CAACP,MAAL,CAAY,QAAZ,CACA,MAEJ,IAAK,QAAL,CACIM,CAAS,CAACE,CAAD,CAAT,CACA,MAEJ,IAAK,OAAL,CACIK,KAAK,CAAC,WAAaL,CAAO,CAACA,OAAtB,CAAL,CACA,MAzBR,CA2BH,CA/BL,CAiCH,CA3CC,CA4CFI,eAAe,CAAE,0BAAU,CACvB,KAAKZ,MAAL,CAAY,SAEf,CA/CC,CAgDFW,gBAAgB,CAAE,2BAAU,CACxB,KAAKX,MAAL,CAAY,SAEf,CAnDC,CAsDT,CA9DK,CAAN","sourcesContent":["define(['jquery','core/log','mod_pchat/cloudpoodllloader'], function($,log, cloudpoodll) {\n    \"use strict\"; // jshint ;_;\n/*\nThis file sets up the cloud poodll recorder and passes on events to registered handlers\n */\n\n    log.debug('Recorder helper: initialising');\n\n    return{\n\n        status: 'stopped',\n\n        init: function(opts,on_recording_start,\n            on_recording_end,\n            on_media_processing,\n            on_speech){\n\n            var that = this;\n            cloudpoodll.init(opts['recorderid'],\n\n                function(message){\n                    //console.log(message);\n                    switch(message.type){\n                        case 'recording':\n                            if(message.action==='started'){\n                                that.startbuttonclick();\n                                on_recording_start(message);\n\n                            }else if(message.action==='stopped'){\n                                that.stopbuttonclick();\n                                on_recording_end(message);\n                            }\n                            break;\n                        case 'awaitingprocessing':\n                            //awaitingprocessing fires often, but we only want to post once\n                            if(that.status!='posted') {\n                                on_media_processing(message);\n                            }\n                            that.status='posted';\n                            break;\n\n                        case 'speech':\n                            on_speech(message);\n                            break;\n\n                        case 'error':\n                            alert('PROBLEM:' + message.message);\n                            break;\n                    }\n                }\n            );\n        },\n        stopbuttonclick: function(){\n            this.status='stopped';\n            //do something\n        },\n        startbuttonclick: function(){\n            this.status='started';\n           //do something\n        }\n\n    };//end of return value\n});"],"file":"recorderhelper.min.js"}