{"version":3,"sources":["../src/recorderhelper.js"],"names":["define","$","log","cloudpoodll","debug","status","init","opts","on_recording_start","on_recording_end","on_media_processing","on_speech","that","message","type","action","startbuttonclick","stopbuttonclick","alert"],"mappings":"AAAAA,OAAM,4BAAC,CAAC,QAAD,CAAU,UAAV,CAAqB,6BAArB,CAAD,CAAsD,SAASC,CAAT,CAAWC,CAAX,CAAgBC,CAAhB,CAA6B,CACrF,aAKAD,CAAG,CAACE,KAAJ,CAAU,+BAAV,EAEA,MAAM,CAEFC,MAAM,CAAE,SAFN,CAIFC,IAAI,CAAE,cAASC,CAAT,CAAcC,CAAd,CACFC,CADE,CAEFC,CAFE,CAGFC,CAHE,CAGQ,CAEV,GAAIC,CAAAA,CAAI,CAAG,IAAX,CACAT,CAAW,CAACG,IAAZ,CAAiBC,CAAI,WAArB,CAEI,SAASM,CAAT,CAAiB,CAEb,OAAOA,CAAO,CAACC,IAAf,EACI,IAAK,WAAL,CACI,GAAoB,SAAjB,GAAAD,CAAO,CAACE,MAAX,CAA8B,CAC1BH,CAAI,CAACI,gBAAL,GACAR,CAAkB,CAACK,CAAD,CAErB,CAJD,IAIM,IAAoB,SAAjB,GAAAA,CAAO,CAACE,MAAX,CAA8B,CAChCH,CAAI,CAACK,eAAL,GACAR,CAAgB,CAACI,CAAD,CACnB,CACD,MACJ,IAAK,oBAAL,CAEI,GAAgB,QAAb,EAAAD,CAAI,CAACP,MAAR,CAA0B,CACtBK,CAAmB,CAACG,CAAD,CACtB,CACDD,CAAI,CAACP,MAAL,CAAY,QAAZ,CACA,MAEJ,IAAK,QAAL,CACIM,CAAS,CAACE,CAAD,CAAT,CACA,MAEJ,IAAK,OAAL,CACIK,KAAK,CAAC,WAAaL,CAAO,CAACA,OAAtB,CAAL,CACA,MAzBR,CA2BH,CA/BL,CAiCH,CA3CC,CA4CFI,eAAe,CAAE,0BAAU,CACvB,KAAKZ,MAAL,CAAY,SAEf,CA/CC,CAgDFW,gBAAgB,CAAE,2BAAU,CACxB,KAAKX,MAAL,CAAY,SAEf,CAnDC,CAsDT,CA9DK,CAAN","sourcesContent":["define(['jquery','core/log','mod_pchat/cloudpoodllloader'], function($,log, cloudpoodll) {\r\n    \"use strict\"; // jshint ;_;\r\n/*\r\nThis file sets up the cloud poodll recorder and passes on events to registered handlers\r\n */\r\n\r\n    log.debug('Recorder helper: initialising');\r\n\r\n    return{\r\n\r\n        status: 'stopped',\r\n\r\n        init: function(opts,on_recording_start,\r\n            on_recording_end,\r\n            on_media_processing,\r\n            on_speech){\r\n\r\n            var that = this;\r\n            cloudpoodll.init(opts['recorderid'],\r\n\r\n                function(message){\r\n                    //console.log(message);\r\n                    switch(message.type){\r\n                        case 'recording':\r\n                            if(message.action==='started'){\r\n                                that.startbuttonclick();\r\n                                on_recording_start(message);\r\n\r\n                            }else if(message.action==='stopped'){\r\n                                that.stopbuttonclick();\r\n                                on_recording_end(message);\r\n                            }\r\n                            break;\r\n                        case 'awaitingprocessing':\r\n                            //awaitingprocessing fires often, but we only want to post once\r\n                            if(that.status!='posted') {\r\n                                on_media_processing(message);\r\n                            }\r\n                            that.status='posted';\r\n                            break;\r\n\r\n                        case 'speech':\r\n                            on_speech(message);\r\n                            break;\r\n\r\n                        case 'error':\r\n                            alert('PROBLEM:' + message.message);\r\n                            break;\r\n                    }\r\n                }\r\n            );\r\n        },\r\n        stopbuttonclick: function(){\r\n            this.status='stopped';\r\n            //do something\r\n        },\r\n        startbuttonclick: function(){\r\n            this.status='started';\r\n           //do something\r\n        }\r\n\r\n    };//end of return value\r\n});"],"file":"recorderhelper.min.js"}