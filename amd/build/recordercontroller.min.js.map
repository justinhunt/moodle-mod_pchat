{"version":3,"sources":["../src/recordercontroller.js"],"names":["define","$","log","def","cloudpoodllloader","recorderhelper","debug","clone","extend","init","props","dd","theid","widgetid","configcontrol","get","activitydata","JSON","parse","value","remove","cmid","recorderid","updatecontrolid","C_UPDATECONTROL","streamingresultsid","C_STREAMINGCONTROL","is_browser_ok","setup_recorder","navigator","mediaDevices","getUserMedia","on_recording_start","transcriber","transcriber_amazonstreaming","streamingresults","on_recording_end","on_media_processing","eventdata","updatecontrol","val","mediaurl","length","stringify","on_speech","speech","capturedspeech","speechresults","push","process_html","opts","controls","register_events"],"mappings":"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","sourcesContent":["\r\ndefine(['jquery', 'core/log','mod_pchat/definitions','mod_pchat/cloudpoodllloader','mod_pchat/recorderhelper'],\r\n    function($, log, def, cloudpoodllloader,recorderhelper) {\r\n\r\n    \"use strict\"; // jshint ;_;\r\n\r\n    log.debug('Recorder controller: initialising');\r\n\r\n    return {\r\n\r\n        //for making multiple instances\r\n        clone: function(){\r\n            return $.extend(true,{},this);\r\n        },\r\n\r\n        //pass in config, the jquery video/audio object, and a function to be called when conversion has finshed\r\n        init: function(props){\r\n            var dd = this.clone();\r\n\r\n            //pick up opts from html\r\n            var theid='#amdopts_' + props.widgetid;\r\n            var configcontrol = $(theid).get(0);\r\n            if(configcontrol){\r\n                dd.activitydata = JSON.parse(configcontrol.value);\r\n                $(theid).remove();\r\n            }else{\r\n                //if there is no config we might as well give up\r\n                log.debug('PChat Recorder Controller: No config found on page. Giving up.');\r\n                return;\r\n            }\r\n\r\n            dd.cmid = props.cmid;\r\n            dd.recorderid = dd.activitydata.recorderid;\r\n            dd.updatecontrolid = props.widgetid + def.C_UPDATECONTROL;\r\n            dd.streamingresultsid = props.widgetid + def.C_STREAMINGCONTROL;\r\n\r\n\r\n            //if the browser doesn't support html5 recording.\r\n            //then do not go any further\r\n            if(!dd.is_browser_ok()){\r\n                return;\r\n            }\r\n            \r\n            dd.setup_recorder();\r\n\r\n        },\r\n\r\n        is_browser_ok: function(){\r\n            return (navigator && navigator.mediaDevices\r\n                && navigator.mediaDevices.getUserMedia);\r\n        },\r\n\r\n\r\n        setup_recorder: function(){\r\n            var dd = this;\r\n\r\n            //Set up the callback functions for the audio recorder\r\n\r\n            //originates from the recording:started event\r\n            //contains no meaningful data\r\n            //See https://api.poodll.com\r\n            var on_recording_start= function(eventdata){\r\n                //init streaming transcriber results\r\n                if(dd.activitydata.transcriber == def.transcriber_amazonstreaming) {\r\n                    dd.streamingresults = [];\r\n                }//end of if amazonstreaming\r\n            };\r\n\r\n            var on_speech = function (eventdata) {\r\n                var speech = eventdata.capturedspeech;\r\n                var speechresults = eventdata.speechresults;\r\n                if(dd.activitydata.transcriber == def.transcriber_amazonstreaming) {\r\n                    dd.streamingresults.push(speechresults);\r\n                    log.debug(dd.streamingresults);\r\n                }\r\n            };\r\n\r\n            //originates from the recording:ended event\r\n            //contains no meaningful data\r\n            //See https://api.poodll.com\r\n            var on_recording_end= function(eventdata){\r\n                //nothing to do here\r\n            };\r\n\r\n            //data sent here originates from the awaiting_processing event\r\n            //See https://api.poodll.com\r\n            var on_media_processing= function(eventdata){\r\n                var updatecontrol = $('#' + dd.updatecontrolid);\r\n                updatecontrol.val(eventdata.mediaurl);\r\n\r\n                if(dd.activitydata.transcriber == def.transcriber_amazonstreaming &&\r\n                    dd.streamingresults &&\r\n                    dd.streamingresults.length > 0){\r\n                    var streamingresults = $('#' + dd.streamingresultsid);\r\n                    streamingresults.val(JSON.stringify(dd.streamingresults));\r\n                }\r\n\r\n            };\r\n\r\n            //init the recorder\r\n            recorderhelper.init(dd.activitydata,\r\n                on_recording_start,\r\n                on_recording_end,\r\n                on_media_processing,\r\n                on_speech);\r\n        },\r\n\r\n\r\n        process_html: function(){\r\n            var opts = this.activitydata;\r\n            //these css classes/ids are all passed in from php in\r\n            //renderer.php::fetch_activity_amd\r\n            var controls ={};\r\n            this.controls = controls;\r\n\r\n            //init drop downs\r\n\r\n        },\r\n\r\n        register_events: function() {\r\n            var dd = this;\r\n\r\n\r\n        }\r\n    };//end of returned object\r\n});//total end\r\n"],"file":"recordercontroller.min.js"}