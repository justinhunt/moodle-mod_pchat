{"version":3,"sources":["../src/recordercontroller.js"],"names":["define","$","log","def","cloudpoodllloader","recorderhelper","transcriber","debug","clone","extend","init","props","dd","theid","widgetid","configcontrol","get","activitydata","JSON","parse","value","remove","cmid","recorderid","updatecontrolid","C_UPDATECONTROL","streamingresultsid","C_STREAMINGCONTROL","is_browser_ok","setup_transcriber","setup_recorder","navigator","mediaDevices","getUserMedia","streamingresults","opts","language","region","token","parent","owner","appid","expiretime","transcriber_amazonstreaming","onFinalResult","transcript","result","push","onPartialResult","on_recording_start","active","window","video","audio","then","stream","start","catch","error","on_recording_end","closeSocket","on_media_processing","eventdata","updatecontrol","val","mediaurl","length","stringify","process_html","controls","register_events"],"mappings":"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","sourcesContent":["\ndefine(['jquery', 'core/log','mod_pchat/definitions','mod_pchat/cloudpoodllloader','mod_pchat/recorderhelper','mod_pchat/transcriber-lazy'],\n    function($, log, def, cloudpoodllloader,recorderhelper, transcriber) {\n\n    \"use strict\"; // jshint ;_;\n\n    log.debug('Recorder controller: initialising');\n\n    return {\n\n        //for making multiple instances\n        clone: function(){\n            return $.extend(true,{},this);\n        },\n\n        //pass in config, the jquery video/audio object, and a function to be called when conversion has finshed\n        init: function(props){\n            var dd = this.clone();\n\n            //pick up opts from html\n            var theid='#amdopts_' + props.widgetid;\n            var configcontrol = $(theid).get(0);\n            if(configcontrol){\n                dd.activitydata = JSON.parse(configcontrol.value);\n                $(theid).remove();\n            }else{\n                //if there is no config we might as well give up\n                log.debug('PChat Recorder Controller: No config found on page. Giving up.');\n                return;\n            }\n\n            dd.cmid = props.cmid;\n            dd.recorderid = dd.activitydata.recorderid;\n            dd.updatecontrolid = props.widgetid + def.C_UPDATECONTROL;\n            dd.streamingresultsid = props.widgetid + def.C_STREAMINGCONTROL;\n\n\n            //if the browser doesn't support html5 recording.\n            //then do not go any further\n            if(!dd.is_browser_ok()){\n                return;\n            }\n\n            dd.setup_transcriber();\n            \n            dd.setup_recorder();\n\n\n\n\n        },\n\n        is_browser_ok: function(){\n            return (navigator && navigator.mediaDevices\n                && navigator.mediaDevices.getUserMedia);\n        },\n\n        setup_transcriber: function(){\n            var dd = this;\n            dd.streamingresults = false;\n\n            //init streaming transcriber\n            var opts={};\n            opts['language']=dd.activitydata.language;\n            opts['region']=dd.activitydata.region;\n            opts['transcriber']=dd.activitydata.transcriber;\n            opts['token'] = dd.activitydata.token;\n            opts['parent'] = dd.activitydata.parent;\n            opts['owner'] = dd.activitydata.owner;\n            opts['appid'] = dd.activitydata.appid;\n            opts['expiretime'] = dd.activitydata.expiretime;\n            opts['transcriber']=dd.activitydata.transcriber;\n\n            if(opts['transcriber'] == def.transcriber_amazonstreaming) {\n                transcriber.init(opts);\n                transcriber.onFinalResult = function (transcript, result) {\n                    dd.streamingresults.push(result);\n                    //if recording over deal with final result\n                    //if(!transcriber.active){\n                    log.debug(dd.streamingresults);\n                    //}\n\n                    // theCallback(message);\n                };\n                transcriber.onPartialResult = function (transcript, result) {\n                    //do nothing\n                };\n            }\n        },\n\n        setup_recorder: function(){\n            var dd = this;\n\n            //Set up the callback functions for the audio recorder\n\n            //originates from the recording:started event\n            //contains no meaningful data\n            //See https://api.poodll.com\n            var on_recording_start= function(eventdata){\n                //start streaming transcriber\n                if(dd.activitydata.transcriber == def.transcriber_amazonstreaming) {\n                    if (transcriber.active) {\n                        return;\n                    }\n                    //init our streamingresults\n                    dd.streamingresults = [];\n                    // first we get the microphone input from the browser (as a promise)...\n                    window.navigator.mediaDevices.getUserMedia({\n                        video: false,\n                        audio: true,\n                    }).then(function (stream) {\n                        transcriber.start(stream, transcriber)\n                    }).catch(function (error) {\n                            log.debug(error);\n                            log.debug('There was an error streaming your audio to Amazon Transcribe. Please try again.');\n                        }\n                    );\n                }//end of if amazonstreaming\n            };\n\n            //originates from the recording:ended event\n            //contains no meaningful data\n            //See https://api.poodll.com\n            var on_recording_end= function(eventdata){\n                //stop streaming transcriber\n                if(dd.activitydata.transcriber == def.transcriber_amazonstreaming) {\n                    if (!transcriber.active) {\n                        return;\n                    }\n                    transcriber.closeSocket();\n                }\n            };\n\n            //data sent here originates from the awaiting_processing event\n            //See https://api.poodll.com\n            var on_media_processing= function(eventdata){\n                var updatecontrol = $('#' + dd.updatecontrolid);\n                updatecontrol.val(eventdata.mediaurl);\n\n                if(dd.activitydata.transcriber == def.transcriber_amazonstreaming &&\n                    dd.streamingresults &&\n                    dd.streamingresults.length > 0){\n                    var streamingresults = $('#' + dd.streamingresultsid);\n                    streamingresults.val(JSON.stringify(dd.streamingresults));\n                }\n            };\n\n            //init the recorder\n            recorderhelper.init(dd.activitydata,\n                on_recording_start,\n                on_recording_end,\n                on_media_processing);\n        },\n\n\n        process_html: function(){\n            var opts = this.activitydata;\n            //these css classes/ids are all passed in from php in\n            //renderer.php::fetch_activity_amd\n            var controls ={};\n            this.controls = controls;\n\n            //init drop downs\n\n        },\n\n        register_events: function() {\n            var dd = this;\n\n\n        }\n    };//end of returned object\n});//total end\n"],"file":"recordercontroller.min.js"}